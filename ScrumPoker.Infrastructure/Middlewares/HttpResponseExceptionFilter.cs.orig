using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using ScrumPoker.Common;
<<<<<<< HEAD
using ScrumPoker.Common.NotFoundExceptions;
=======
>>>>>>> c2313613832c58a38f2ff4dce4e352cfc4675d0b
using ScrumPoker.Web.Models.Models.WebResponse;

namespace ScrumPoker.Infrastructure.Middlewares;

public class HttpResponseExceptionFilter : IActionFilter, IOrderedFilter
{
<<<<<<< HEAD
    
=======
>>>>>>> c2313613832c58a38f2ff4dce4e352cfc4675d0b
    public int Order => int.MaxValue - 10;

    public void OnActionExecuting(ActionExecutingContext context) { }

    public void OnActionExecuted(ActionExecutedContext context)
    {
        if (context.Exception is not ScrumPokerException httpResponseException) return;
        if (httpResponseException.Message != null)
        {
            var statusCode = context.Exception switch
            {
                ConflictException => 409,
                NotFoundException => 404,
                _ => throw new ArgumentOutOfRangeException
                {
                    HelpLink = null,
                    HResult = 0,
                    Source = null
                }
            };

            var errorResponse = new ScrumPokerError
            {
                Field = context.Exception.GetType().ToString(),
                Messages = new List<string> {httpResponseException.Message}
            };
                
            var response = new ScrumPokerErrorResponse
            {
                Errors = new List<ScrumPokerError>
                {
                    errorResponse
                }
            };
                
            context.Result = new ObjectResult(response)
            {
                StatusCode = statusCode
            };
        }

        context.ExceptionHandled = true;
    }
}